use_gpu: True
device: 0
early_stop:
  patience: 50
seed: 0
federate:
  mode: standalone
  total_round_num: 200
  sample_client_rate: 1.0
  client_num: 5
  make_global_eval: False
data:
  root: data/
  local_eval_whole_test_dataset: True #important! Whether the test dataset for each client is equivalent to the test dataset for the unsplit dataset
  type: 'CIFAR10@torchvision'
  splits: [ 1.0, 0.0, 0.0 ]
  num_workers: 0
  transform: [ [ 'ToTensor' ], [ 'Normalize', { 'mean': [ 0.4914, 0.4822, 0.4465 ], 'std': [ 0.2470, 0.2435, 0.2616 ] } ] ] #very import
  test_transform: [ [ 'ToTensor' ], [ 'Normalize', { 'mean': [ 0.4914, 0.4822, 0.4465 ], 'std': [ 0.2470, 0.2435, 0.2616 ] } ] ]
  args: [ { 'download': True } ]
  splitter: 'lda'
  splitter_args: [ { 'alpha': 1.0 } ]
dataloader:
  batch_size: 256
fml:
  meme_model:
    type: LeNet5 # If the method is FML, the model of the main cfg file refers to meme_model
    out_channels: 10
model:
  type: LeNet5 # If the method is FML, the model of the main cfg file refers to meme_model
  out_channels: 10
  dropout: 0.5
train:
  local_update_steps: 1
  batch_or_epoch: epoch
  optimizer:
    type: Adam
    lr: 0.001
    weight_decay: 1e-4
grad:
  grad_clip: 5.0
criterion:
  type: CrossEntropyLoss
trainer:
  type: fml_cv_trainer
eval:
  freq: 1
  metrics: ['acc']
  report : ['weighted_avg', 'avg']
  best_res_update_round_wise_key: test_acc
exp_name: 'HPO_FML_5_clients_on_cifa10_low_heterogeneity'